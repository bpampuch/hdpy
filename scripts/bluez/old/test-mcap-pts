#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import dbus
import time
import gobject
import dbus.mainloop.glib
import glib
import string

mcap_iface = "org.bluez.mcap"
bdaddr = "00:80:98:E7:36:85"
cpsm = 0x1001
dpsm = 0x1003
mdepid = 1
conf = 0x00

print "Bdaddr", bdaddr
session = None
mcl = None
csp_caps = None

def object_signal(*args, **kwargs):
	global mcl
	if 'member' not in kwargs:
		return
	sig_name = kwargs['member']
	if sig_name == "Recv":
		mdl, data = args
		print "Received data in mdl", mdl
		print "Data:", data
	elif sig_name == "MCLConnected":
		tmp_mcl, addr = args
		if mcl != None:
			print "Mcl is already connected"
			return
		print "New mcl"
		mcl = tmp_mcl
	elif sig_name == "MDLConnected":
		tmp_mcl, mdl = args
		if mcl != tmp_mcl:
			return
		print "New mdl connected", mdl
	elif sig_name == "MDLReconnected":
		mdl = args[0]
		print "New mdl reconnected", mdl
	elif sig_name == "MCLDisconnected":
		tmp_mcl = args[0]
		if mcl != tmp_mcl:
			return
		print "mcl disconnected"
	elif sig_name == "MCLReconnected":
		tmp_mcl = args[0]
		if mcl != tmp_mcl:
			return
		print "mcl reconnected"
	elif sig_name == "MDLDeleted":
		mdl = args[0]
		print "mdl deleted", mdl
	elif sig_name == "MDLAborted":
		tmp_mcl, mdl = args
		if mcl != tmp_mcl:
			return
		print "mdl aborted", mdl

def adapter_signal(value, path, interface, member):
	hci = str(value)
	if hci.split("/")[-1] == ad.split("/")[-1]:
		print "Adapter went out, quitting"
		mainloop.quit()

def con_mcl(cmd):
	global mcl
	if session == None:
		print "Session not connected"
		return
	print "connect_mcl"
	try:
		mcl = mcap.CreateMCL(session, bdaddr, cpsm)
	except Exception, e:
		print e

def close_mcl(cmd):
	global mcl
	if mcl == None:
		print "mcl is not connected"
		return
	print "close_mcl"
	try:
		mcap.CloseMCL(mcl)
	except Exception, e:
		print e

def delete_mcl(cmd):
	global mcl
	if mcl == None:
		print "mcl is not connected"
		return
	print "delete_mcl"
	try:
		mcap.DeleteMCL(mcl)
		mcl = None
	except Exception, e:
		print e

def send_data(cmd):
	global mcl
	mdl = int(cmd[1])
	data = "test"
	try:
		mcap.Send(mdl, data)
	except Exception, e:
		print "Error", e

def con_mdl(cmd):
	print "Connect mdl"
	try:
		mdl = mcap.CreateMDL(mcl, mdepid, conf)
		mcap.ConnectMDL(mdl, dpsm)
		print "connected mdl", mdl
	except Exception, e:
		print e

def close_mdl(cmd):
	mdl = int(cmd[1])
	print "Closing data channel", mdl
	try:
		mcap.CloseMDL(mdl)
	except Exception, e:
		print "Error", e

def recon_mdl(cmd):
	mdl = int(cmd[1])
	print "Reconnecting mdl", mdl
	try:
		mcap.ReconnectMDL(mdl)
		mcap.ConnectMDL(mdl, dpsm)
		print "reconnected mdl", mdl
	except Exception, e:
		print e

def del_mdl(cmd):
	mdl = int(cmd[1])
	print "Deleting mdl", mdl
	try:
		mcap.DeleteMDL(mdl)
		print "deleted mdl", mdl
	except Exception, e:
		print e

def del_all(cmd):
	global mcl
	if mcl == None:
		print "Mcl is not connected"
		return
	print "Deleting all mdls"
	try:
		mcap.DeleteAll(mcl)
		pass
	except Exception, e:
		print e

def abort_mdl(cmd):
	mdl = int(cmd[1])
	print "Aborting mdl", mdl
	try:
		mcap.AbortMDL(mdl)
		print "aborted mdl", mdl
	except Exception, e:
		print e

def neg_mdl(cmd):
	print "Negotiating mdl"
	try:
		mdl = mcap.CreateMDL(mcl, mdepid, conf)
		print "negotitated mdl", mdl
	except Exception, e:
		print e

def csp_cap(cmd):
	global csp_caps
	print "Requesting CSP capabilities"
	try:
		ppm = 50
		csp_caps = mcap.SyncCapabilities(mcl, ppm)
		print "Capabilities:", csp_caps
	except Exception, e:
		print e

def csp_set(cmd):
	print "Setting CSP timestamp"
	try:
		send_indication = 0
		retries = 5
		btclock = 0xffffffff
		while retries > 0 and btclock == 0xffffffff:
			print "Reading BT clock"
			btclock = mcap.SyncBtClock(mcl)
			retries -= 1
		print "\tBT clock is 0x%x" % btclock
		btclock += 3200 * 10 # PTS wants it fairly into the future
		timestamp = 0x1122334455667788
		print "\tScheduled BT clock will be 0x%x" % btclock
		print mcap.SyncSet(mcl, send_indication, btclock, timestamp)
	except Exception, e:
		print e

def csp_seti(cmd):
	print "Setting CSP timestamp immediately"
	try:
		send_indication = 0
		btclock = 0xffffffff
		print "\tBT clock is 0x%x (immediate)" % btclock
		timestamp = 0x1122334455667788
		print mcap.SyncSet(mcl, send_indication, btclock, timestamp)
	except Exception, e:
		print e

def csp_set_ind(cmd):
	print "Setting CSP timestamp"
	try:
		send_indication = 1
		retries = 5
		btclock = 0xffffffff
		while retries > 0 and btclock == 0xffffffff:
			print "Reading BT clock"
			btclock = mcap.SyncBtClock(mcl)
			retries -= 1
		print "\tBT clock is 0x%x" % btclock
		btclock += 3200 * 10 # PTS wants it fairly into the future
		timestamp = 0x1122334455667788
		print mcap.SyncSet(mcl, send_indication, btclock, timestamp)
	except Exception, e:
		print e

def enable_csp(cmd):
	print "Enabling CSP"
	try:
		print mcap.SyncEnable(session) and "Enabled" or "Not enabled"
	except Exception, e:
		print e

def disable_csp(cmd):
	print "Disabling CSP"
	try:
		print mcap.SyncDisable(session) and "Disabled" or "Not disabled"
	except Exception, e:
		print e


commands = {"con_mcl": {"help":"con_mcl", "npar": 0, "fun": con_mcl},
	"close_mcl": {"help":"close_mcl", "npar": 0, "fun": close_mcl},
	"delete_mcl": {"help":"delete_mcl", "npar": 0, "fun": delete_mcl},
	"send_data": {"help":"send_data mdl", "npar": 1, "fun": send_data},
	"con_dc": {"help":"con_dc", "npar": 0, "fun": con_mdl},
	"close_dc": {"help":"close_dc mdl", "npar": 1, "fun": close_mdl},
	"recon_dc": {"help":"recon_dc mdl", "npar": 1, "fun": recon_mdl},
	"del_dc": {"help":"del_dc mdl", "npar": 1, "fun": del_mdl},
	"del_all": {"help":"del_all", "npar": 0, "fun": del_all},
	"abort_dc": {"help":"abort_dc mdl", "npar": 1, "fun": abort_mdl},
	"neg_dc": {"help":"con_dc", "npar": 0, "fun": neg_mdl},
	"enable_csp": {"help":"enable_csp", "npar": 0, "fun": enable_csp},
	"disable_csp": {"help":"disable_csp", "npar": 0, "fun": disable_csp},
	"csp_cap": {"help":"csp_cap", "npar": 0, "fun": csp_cap},
	"csp_set": {"help":"csp_set", "npar": 0, "fun": csp_set},
	"csp_seti": {"help":"csp_seti", "npar": 0, "fun": csp_seti},
	"csp_set_ind": {"help":"csp_set_ind", "npar": 0, "fun": csp_set_ind},
	}

def check_cmd(cmd):
	try:
		if cmd[0].lower() not in commands.keys():
			return False
		c = commands[cmd[0].lower()]
		if (c["npar"] + 1) == len(cmd):
			return True
		print "help: %s" % c["help"]
	except:
		pass
	return False

def stdin_cb(fd, condition):
	cmd = string.split(fd.readline())
	if not check_cmd(cmd):
		print "Available commands"
		for c in commands:
			print "\t%s" % commands[c]["help"]
		return True
	commands[cmd[0].lower()]["fun"](cmd)
	return True


dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
bus = dbus.SystemBus()

manager = dbus.Interface(bus.get_object("org.bluez", "/"), "org.bluez.Manager")

ad = manager.DefaultAdapter()
print "Binding to adapter", ad

mcap = dbus.Interface(bus.get_object("org.bluez", ad), mcap_iface)

bus.add_signal_receiver(object_signal, bus_name="org.bluez",
				member_keyword="member",
				path_keyword="path",
				interface_keyword="interface",
				dbus_interface=mcap_iface,
				byte_arrays=True)

bus.add_signal_receiver(adapter_signal, bus_name="org.bluez",
				signal_name = "AdapterAdded",
				path_keyword="path",
				member_keyword="member",
				interface_keyword="interface")

bus.add_signal_receiver(adapter_signal, bus_name="org.bluez",
				signal_name = "AdapterRemoved",
				path_keyword="path",
				member_keyword="member",
				interface_keyword="interface")

session = mcap.StartSession(cpsm, dpsm)
enable_csp(None)

try:
	print "Session: ", session

	glib.io_add_watch(sys.stdin, glib.IO_IN, stdin_cb)

	mainloop = gobject.MainLoop()
	mainloop.run()
finally:
	try:
		mcap.StopSession(session)
		print
		print "Stopped instance, thanks"
		print
	except:
		pass
