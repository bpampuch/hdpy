#!/usr/bin/env python
# -*- coding: utf-8

#######################################################################
# Copyright 2010 Signove Corporation - All rights reserved.
# Contact: Signove Corporation (contact@signove.com)
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of version 2.1 of the GNU Lesser General Public
# License as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307  USA
#
# If you have questions regarding the use of this file, please contact
# Signove at contact@signove.com.
#######################################################################

# Run test3_server in the other side

from mcap.mcap_instance import MCAPInstance
from mcap import mcap
from mcap.misc import parse_params
import time
import sys
import glib
import random

loop = glib.MainLoop()

class MI(MCAPInstance):
	def __init__(self, adapter, listener):
		MCAPInstance.__init__(self, adapter, listener)
		self.test_step = 0
		self.response = self.MCLConnected

	def bye(self):
		glib.MainLoop.quit(loop)

	def RecvDump(self, mcl, message):
		# print "Received raw msg", repr(message)
		return True

	def SendDump(self, mcl, message):
		# print "Sent", repr(message)
		return True

	def test(self, mcl, mdl, response, *args):
		exhausted = True
		if type(self.response) is list:
			expected = self.response[0]
			del self.response[0]
			if self.response:
				exhausted = False
		else:
			expected = self.response

		if response is not None and response != expected:
			print "Test %d expected %s came %s" % \
				(self.test_step, expected.__name__,
					response.__name__)
			sys.exit(1)

		if not exhausted:
			return False

		test_item = (None, False)
		while len(test_item) > 1 and not test_item[1]:
			test_item = MI.tests[self.test_step]
			self.test_step += 1

		print "Round %d %s" % (self.test_step, test_item[0].__name__)
		test_item[0](self, mcl, mdl)

		return False

	def finish(self, *dummy):
		print "All tests ok"
		glib.timeout_add(500, self.bye)

	################################3############## Tests

	def test_disconnect(self, mcl, dummy):
		self.response = self.MCLDisconnected
		instance.CloseMCL(mcl)

	def test_reconnect(self, mcl, dummy):
		self.response = self.MCLReconnected
		new_mcl = instance.CreateMCL(addr, dpsm)
		assert(mcl is new_mcl)

	def test_delete(self, mcl, dummy):
		self.response = self.MCLUncached
		instance.DeleteMCL(mcl)

	def test_connect(self, mcl, dummy):
		self.response = self.MCLConnected
		instance.CreateMCL(addr, dpsm)

	def test_mdl_create(self, mcl, dummy):
		self.response = self.MDLReady
		mdlid = instance.CreateMDLID(mcl)
		print "\tmdl id is", mdlid
		instance.CreateMDL(mcl, mdlid, 0x01, 0x01)

	def test_mdl_create_streaming(self, mcl, dummy):
		self.response = self.MDLReady
		mdlid = instance.CreateMDLID(mcl)
		print "\tstreaming mdl id is", mdlid
		instance.CreateMDL(mcl, mdlid, 0x02, 0x02, False)

	def test_mdl_create_no_config(self, mcl, dummy):
		self.response = self.MDLReady
		mdlid = instance.CreateMDLID(mcl)
		print "\tstreaming mdl id is", mdlid
		instance.CreateMDL(mcl, mdlid, 0x01, 0x00)

	def test_mdl_create_pending(self, mcl, dummy):
		self.test_mdl_create(mcl, dummy)
		# and now tries to create again
		mdlid = instance.CreateMDLID(mcl)
		try:
			instance.CreateMDL(mcl, mdlid, 0x01, 0x1)
			print "CreateMDL in PENDING state should have failed"
			sys.exit(1)
		except mcap.InvalidOperation:
			pass

	def test_mdl_connect(self, dummy, mdl):
		print "MDL configuration:", mdl.config
		self.response = self.MDLConnected
		instance.ConnectMDL(mdl)

	def test_mdl_connect_connected(self, dummy, mdl):
		self.response = self.test_mdl_connect_connected
		try:
			instance.ConnectMDL(mdl)
			print "CreateMDL in CONNECTED state should have failed"
		except mcap.InvalidOperation:
			pass
			glib.timeout_add(0, self.test, dummy, mdl,
					self.test_mdl_connect_connected)

	def test_mdl_reconnect(self, dummy, mdl):
		if reconn_disabled:
			self.response = self.MDLReady_error
		else:
			self.response = self.MDLReady
		instance.ReconnectMDL(mdl)

	def test_mdl_reconnect_unsupp(self, dummy, mdl):
		self.ReconnectionDisable()
		self.response = self.test_mdl_reconnect_unsupp
		try:
			instance.ReconnectMDL(mdl)
			print "ReconnectMDL should have failed"
		except mcap.InvalidOperation:
			pass
			glib.timeout_add(0, self.test, dummy, mdl,
					self.test_mdl_reconnect_unsupp)

	def test_mdl_reconnect_pending(self, mcl, mdl):
		self.test_mdl_reconnect(mcl, mdl)
		# and now tries to create again
		try:
			instance.ReconnectMDL(mdl)
			print "ReconnectMDL in PENDING state should have failed"
			sys.exit(1)
		except mcap.InvalidOperation:
			pass
		try:
			instance.CreateMDL(mcl, 33, 0x01, 0x01)
			print "CreateMDL in PENDING state should have failed (2)"
			sys.exit(1)
		except mcap.InvalidOperation:
			pass

	def test_mdl_connect2(self, dummy, mdl):
		self.response = self.MDLConnected
		instance.ConnectMDL(mdl)

	def test_mdl_abort(self, mcl, mdl):
		self.response = self.MDLAborted
		instance.AbortMDL(mcl, mdl.mdlid)

	def test_mdl_send(self, dummy, mdl):
		self.response = self.Recv
		mdl._a = a = int(random.random() * 1000)
		mdl._b = b = int(random.random() * 1000)
		instance.Send(mdl, "%d + %d" % (a, b))

	def test_mdl_close(self, dummy, mdl):
		self.response = self.MDLClosed
		instance.CloseMDL(mdl)

	def test_mdl_delete(self, dummy, mdl):
		self.response = self.MDLDeleted
		instance.DeleteMDL(mdl)

	def test_mdl_delete_all(self, mcl, dummy):
		if reconn_disabled:
			self.response = [self.MDLDeleted, self.MDLDeleted]
		else:
			self.response = self.MDLDeleted
		instance.DeleteAll(mcl)

	def test_mdl_getfd(self, dummy, mdl):
		self.response = self.fd_activity
		sk = instance.TakeFd(mdl)
		assert(mdl.sk is sk)
		glib.io_add_watch(sk, glib.IO_IN, self.fd_activity, dummy, mdl)
		mdl._a = a = int(random.random() * 1000)
		mdl._b = b = int(random.random() * 1000)
		sk.send("%d + %d" % (a, b))

	def test_mdl_sendfd(self, dummy, mdl):
		self.response = self.fd_activity
		mdl._a = a = int(random.random() * 1000)
		mdl._b = b = int(random.random() * 1000)
		mdl.write("%d + %d" % (a, b))

	################################### MCAP callbacks

	def MCLConnected(self, mcl, err):
		if err:
			print "MCL Connection error", err
			self.bye()
			return

		print "\tMCL has connected"
		self.test(mcl, None, self.MCLConnected)

	def MCLReconnected(self, mcl, err):
		if err:
			print "MCL Connection error", err
			self.bye()
			return

		print "\tMCL has reconnected"
		self.test(mcl, None, self.MCLReconnected)

	def MCLDisconnected(self, mcl):
		print "\tMCL has disconnected"
		self.test(mcl, None, self.MCLDisconnected)

	def MCLUncached(self, mcl):
		print "\tMCL has disconnected"
		self.test(mcl, None, self.MCLUncached)

	def MDLReady(self, mcl, mdl, err):
		if err:
			self.test(mcl, mdl, self.MDLReady_error)
			return

		print "\tinitiated MDL ready"
		self.test(mcl, mdl, self.MDLReady)

	def MDLReady_error(self):
		pass

	def MDLConnected(self, mdl, err):
		if err:
			print "MDL connection failed!"
			return
		print "\tMDL connected"
		self.test(mdl.mcl, mdl, self.MDLConnected)

	def MDLReconnected(self, mdl):
		print "\tMDL reconnected"
		print "ERROR: this callback is acceptor-only"
		sys.exit(1)

	def MDLAborted(self, mcl, mdl):
		print "\tMDL abort"
		self.test(mcl, mdl, self.MDLAborted)

	def MDLClosed(self, mdl):
		print "\tMDL closed"
		self.test(mdl.mcl, mdl, self.MDLClosed)

	def MDLDeleted(self, mdl):
		print "\tMDL deleted"
		self.test(mdl.mcl, mdl, self.MDLDeleted)

	def Recv(self, mdl, data):
		print "\tMDL received data"
		assert(data == ("%d" % (mdl._a + mdl._b + mdl.mdlid)))
		self.test(mdl.mcl, mdl, self.Recv)

	def fd_activity(self, sk, evt, mcl, mdl):
		print "\tMDL received data via fd"
		if evt == mcap.IO_IN:
			data = mdl.read()
			assert(data == ("%d" % (mdl._a + mdl._b + mdl.mdlid)))
		self.test(mcl, mdl, self.fd_activity)
		return True

try:
	i = sys.argv.index("-r")
	# we mean: disabled at server side.
	reconn_disabled = True
	del sys.argv[i]
except ValueError:
	reconn_disabled = False
	pass

MI.tests = ( \
	(MI.test_disconnect, ),
	(MI.test_reconnect, ),
	(MI.test_disconnect, ),
	(MI.test_delete, ),
	(MI.test_connect, ),
	(MI.test_mdl_create, ),
	(MI.test_mdl_connect, ),
	(MI.test_mdl_send, ),
	(MI.test_mdl_send, ),
	(MI.test_mdl_connect_connected, ),
	(MI.test_mdl_send, ),
	(MI.test_mdl_close, ),
	(MI.test_mdl_create, ),
	(MI.test_mdl_abort, ),
	(MI.test_mdl_reconnect, ),
	(MI.test_mdl_connect2, not reconn_disabled),
	(MI.test_mdl_close, not reconn_disabled),
	(MI.test_mdl_reconnect_pending, not reconn_disabled),
	(MI.test_mdl_connect2, not reconn_disabled),
	(MI.test_mdl_send, not reconn_disabled),
	(MI.test_mdl_send, not reconn_disabled),
	(MI.test_mdl_connect_connected, not reconn_disabled),
	(MI.test_mdl_send, not reconn_disabled),
	(MI.test_mdl_send, not reconn_disabled),
	(MI.test_mdl_close, not reconn_disabled),
	(MI.test_mdl_delete, not reconn_disabled),
	(MI.test_mdl_delete_all, ),
	(MI.test_mdl_create_streaming, ),
	(MI.test_mdl_connect, ),
	(MI.test_mdl_send, ),
	(MI.test_mdl_send, ),
	(MI.test_mdl_close, ),
	(MI.test_mdl_create_no_config, ),
	(MI.test_mdl_connect, ),
	(MI.test_mdl_send, ),
	(MI.test_mdl_send, ),
	(MI.test_mdl_close, ),
	(MI.test_mdl_create_pending, ),
	(MI.test_mdl_abort, ),
	(MI.test_mdl_create, ),
	(MI.test_mdl_connect, ),
	(MI.test_mdl_getfd, ),
	(MI.test_mdl_sendfd, ),
	(MI.test_mdl_close, ),
	(MI.test_mdl_reconnect_unsupp, ),
	(MI.test_disconnect, ),
	(MI.finish, ),
	)

adapter, device, cpsm, dpsm, addr = parse_params(sys.argv)

instance = MI(adapter, False)

print "Connecting to", device
mcl = instance.CreateMCL(addr, dpsm)

loop.run()
